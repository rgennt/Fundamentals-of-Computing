# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False
explosion_group = set ([])

rock_group = set ([])
missile_group = set ([])

SPACESHIP_ANGLE_VEL_INC = 0.05

spaceship_angle = math.pi / 2
spaceship_angle_vel = 0

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris_blend.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot1.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
#soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.2)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")
ship_thrust_sound.set_volume(.2)
# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")
soundtrack.set_volume(.2)
# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.thrusting_sound = ship_thrust_sound
        
    def draw(self,canvas):
        if self.thrust == False:
            canvas.draw_image(ship_image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        if self.thrust == True:
            canvas.draw_image(ship_image, (self.image_center [0] +self.image_center [0] * 2,\
                                           self.image_center [1]), self.image_size, self.pos, self.image_size, self.angle)
            
    def update(self):
        
        friction = c = 0.01
        self.pos [0] += self.vel [0]
        self.pos [1] += self.vel [1]
        
        
        self.pos [0] %= WIDTH
        self.pos [1] %= HEIGHT
        
        self.vel [0] *= (1-c)
        self.vel [1] *= (1-c)
        
        self.angle  += self.angle_vel
        forward = angle_to_vector(self.angle)
        
        if self.thrust:
            self.vel [0] += forward [0] * 0.1
            self.vel [1] += forward [1] * 0.1
            
        #if self.pos [0] >= WIDTH:
            #self.pos [0] = 0
        #elif self.pos [0] <= 0:
            #self.pos [0] = WIDTH
        #if self.pos [1] >= HEIGHT:
            #self.pos [1] = 0
        #elif self.pos [1] <= 0:
            #self.pos [1] = HEIGHT
        
    def get_position(self):
        return self.pos
        
    def thrusting (self, set):
        
        self.thrust = set
        if set:
            self.thrusting_sound.play() 
        else:
            self.thrusting_sound.rewind()
    
    def get_radius (self):
        return self.radius
    
    def get_vel(self):
        return self.vel
    def get_angle (self):
        return self.angle
    
    def get_vel_angle(self):
        return self.angle_vel
    def shoot (self, missile_sound, missile_group):
        
        fp = angle_to_vector (self.angle)
        
        
        new_missile = Sprite((fp[0] * self.radius + self.pos[0], fp[1] * self.radius + self.pos [1]),\
                           (self.vel [0] + fp[0] * 6, self.vel [1] + fp [1] * 6),\
                           self.angle, 0, missile_image, missile_info, missile_sound)

        missile_group.add (new_missile)
        

    
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        self.animation_time = 0
        if sound:
            sound.rewind()
            sound.play()
    
    def get_position(self):
        return self.pos
    
    def get_radius (self):
        return self.radius
    
    def draw(self, canvas):
        
        if self.animated:
            current_index = (self.animation_time % self.lifespan) // 1
            current_center = [self.image_center[0] +  current_index * self.image_size[0], self.image_center[1]]
            canvas.draw_image(self.image, current_center, self.image_size, self.pos, self.image_size, self.angle)

            #canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
            self.animation_time += 1
            
            
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
    def get_angle(self):
        return self.angle
    
    def get_vel(self):
        return self.vel
    
    def get_vel_angle(self):
        return self.angle_vel
    
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1] 
        
        self.pos [0] %= WIDTH
        self.pos [1] %= HEIGHT
        
        self.age += 1
        
        return self.age >= self.lifespan
    
        #tt = self.get_radius() - 15
        #self.pos [0] = (self.pos [0] + tt)%(WIDTH + 2*tt) - tt
        #self.pos [1] = (self.pos [1] + tt)%(WIDTH + 2*tt) - tt
    
    def collide (self, other_object):
        return dist (self.get_position(), other_object.get_position()) <= self.get_radius()+ other_object.get_radius()


def group_collide (group, other_object):
    global explosion_group
    group1 = set(group)
    for object in group1:
        if object.collide (other_object):
            #pos, vel, ang, ang_vel, image, info, sound = None
            explosion = Sprite(other_object.get_position(), other_object.get_vel(), other_object.get_angle(),\
                               other_object.get_vel_angle(), explosion_image, explosion_info, explosion_sound)
            explosion_group.add(explosion)
            group.remove(object)
            return True
    return False
# keyhandlers to control spaceship

def group_group_collide (set_a, set_m):
    collided = set ([])
    tt = False
    set_a1 = set (set_a)
    for asteroid in set_a1:
        if group_collide (set_m, asteroid):
            collided.add (asteroid)
            tt = True
           
        set_a.difference_update (collided)
    return tt    
        
        

def keydown(key):
    global spaceship_angle, spaceship_angle_vel
    
    
    if simplegui.KEY_MAP['right'] == key:
        my_ship.angle_vel += SPACESHIP_ANGLE_VEL_INC
        
    if simplegui.KEY_MAP['left'] == key:
        my_ship.angle_vel -= SPACESHIP_ANGLE_VEL_INC
    
    
    if simplegui.KEY_MAP['up'] == key:
        my_ship.thrusting (True)
        
        
    if simplegui.KEY_MAP['space'] == key:
        my_ship.shoot (missile_sound, missile_group)
   
    
def keyup(key):
    global spaceship_angle, spaceship_angle_vel
    
    if simplegui.KEY_MAP['right'] == key:
        my_ship.angle_vel -= SPACESHIP_ANGLE_VEL_INC
        
    if simplegui.KEY_MAP['left'] == key:
        my_ship.angle_vel += SPACESHIP_ANGLE_VEL_INC
        
        
    if simplegui.KEY_MAP['up'] == key:
        my_ship.thrusting (False)
            
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started, lives, score
    
    #soundtrack.play()
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        lives = 3
        score = 0
        soundtrack.rewind()
        soundtrack.play()
        
def draw(canvas):
    global time, spaceship_angle_vel, spaceship_angle, score, lives, started, new_rock, soundtrack, rock_group
    
    if group_collide (rock_group, my_ship):
        lives -= 1
    
    if group_group_collide (rock_group, missile_group):
        score += 1
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)
    #new_rock.draw(canvas)
    #a_missile.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    #new_rock.update()
    #a_missile.update()
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group (explosion_group, canvas)
    
    
    canvas.draw_text('Score: ' + str (score), (650, 50), 30, 'White')
    canvas.draw_text('Lives: ' + str (lives), (50, 50), 30, 'White')
    
    if lives <= 0 :
        started = False
        rock_group = set([])
        soundtrack.pause()
        
    
    # draw splash screen if not started
    if not started:
        
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
            
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    pos = [0,0]
    vel = [0, 0]
    
    ang_vel = 0.0
    
    pos [0] = random.randrange (0, WIDTH)
    pos [1] = random.randrange (0, HEIGHT)
    vel [0] = random.randint (-1 - score / 3, 1 + score / 3) 
    vel [1] = random.randint (-1 - score /3, 1 + score /3) 
    ang_vel = float (random.randint (-100.0, 100.0)) / 1000
    
    
    if len(rock_group) <= 12 and started:
         
        new_rock = Sprite((pos[0], pos [1]), vel, 0, ang_vel, asteroid_image, asteroid_info)
        if dist(new_rock.get_position(), my_ship.get_position()) >= my_ship.get_radius () + 10 + new_rock.get_radius():
            rock_group.add (new_rock)
        else:
            return
    

    
def process_sprite_group (set, canvas):
    
    for image in set:
        tt = image.update()
        image.draw(canvas)
        if tt:
            set.remove(image)
            
                          

    
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
#new_rock = Sprite([WIDTH / 3, HEIGHT / 3], [5, 5], 0, 0.1, asteroid_image, asteroid_info)
#a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()