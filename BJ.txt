# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
outcome1 = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []	# create Hand object

    def __str__(self):
        ans = ""
        for i in range(len(self.hand)):
            ans += str(self.hand [i]) + ' '    
        return 'Hand contains ' + ans	# return a string representation of a hand

    def add_card(self, card):
        self.hand.append(card)	# add a card object to a hand

    def get_value(self):
        hand_value = 0
        counter = 0
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        for card in self.hand:
            hand_value += VALUES[card.get_rank()]
            if card.get_rank() == 'A':
                
                counter +=1
        if counter == 0:
            return hand_value
        else:
            if hand_value + 10 <= 21:
                return hand_value + 10
            else:
                return hand_value
            
        
        
        
        # compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        
        counter = 0
        for card in self.hand:
            
            card.draw(canvas, ((CARD_SIZE [0]) * counter + pos [0] ,pos [1] ))
            counter += 1
            # draw a hand on the canvas, use the draw method for cards
         
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                card = Card (suit, rank)
                self.deck.append(card)# create a Deck object
    
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)    # use random.shuffle()

    def deal_card(self):
        return self.deck.pop(-1)
            # deal a card object from the deck
    
    def __str__(self):
        ans = ""
        for i in range(len(self.deck)):
            ans += str(self.deck [i]) + ' '    
        return 'Deck contains ' + ans	# return a string representing the deck



#define event handlers for buttons
def deal():
    global outcome, outcome1, in_play, deck, player_hand, dealer_hand, score
    outcome1 = ''
    # your code goes here
    deck = Deck()
    deck.shuffle()
    player_hand = Hand()
    dealer_hand = Hand()
    player_hand.add_card(deck.deal_card())
    player_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    #outcome = "Player's Hand: " + str(player_hand) + ". Dealer's Hand: " + str(dealer_hand)
    if in_play:
        outcome1 = 'Dealer Wins'
        score -= 1
        #print outcome
    in_play = True
    outcome = 'Hit or stand?'
    
def hit():
    
    global outcome, outcome1, in_play, deck, player_hand, score 
       
    if not in_play:
        return
    if player_hand.get_value () <= 21:
        player_hand.add_card(deck.deal_card())
        
        if player_hand.get_value () > 21:
            outcome = 'New Deal?'
            outcome1 = 'You went bust and lose'
            score -= 1
            in_play = False
            print outcome
    print player_hand   
    
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
        # replace with your code below
    global outcome, outcome1, in_play, deck, player_hand, dealer_hand, score 
    if not in_play:
        return
    if player_hand.get_value () > 21:
        outcome1 = 'You have busted!'
        in_play = False
        score -= 1
        print outcome 
    while dealer_hand.get_value () < 17:
        dealer_hand.add_card (deck.deal_card())
    
    if dealer_hand.get_value () > 21:
        outcome1 = 'Dealer busts'
        in_play = False
        outcome = 'New Deal?'
        score += 1
        
        print outcome
    else:
        if dealer_hand.get_value () >= player_hand.get_value ():
            outcome1 = 'Dealer Wins'
            in_play = False
            score -= 1
            outcome = 'New Deal?'
            print outcome
        else:
            outcome1 = 'Player Wins!!!'
            in_play = False
            score += 1
            outcome = 'New Deal?'
            print outcome
        
    print dealer_hand            
    
    
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global outcome, outcome1, in_play, deck, player_hand, dealer_hand, score
    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])
    player_hand.draw (canvas, [100, 450])
    canvas.draw_text('BlackJack', (50, 50), 50, 'Black')
    canvas.draw_text(outcome, (100, 580), 40, 'Black')
    canvas.draw_text('Player', (100, 420), 40, 'Black')
    canvas.draw_text(outcome1, (200, 220), 40, 'Black')
    canvas.draw_text('Score: ' + str(score), (440, 120), 40, 'Black')
    dealer_hand.draw (canvas, [100, 250])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [100 + CARD_BACK_CENTER [0], 250 + CARD_BACK_CENTER [1]], CARD_SIZE)

        
    


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric